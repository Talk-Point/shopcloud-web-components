{"version":3,"names":["scQueryFieldCss","ScQueryFieldStyle0","ScQueryField","constructor","hostRef","this","filters","inputValue","suggestions","currentStep","contextMenuVisible","fields","handleOutsideClick","event","hostElement","contains","target","handleKeyDownEscape","key","componentWillLoad","parsed","JSON","parse","Array","isArray","console","warn","error","componentDidLoad","hiddenInput","document","createElement","type","name","appendChild","addEventListener","disconnectedCallback","removeEventListener","handleInputFocus","updateSuggestions","handleInputChange","value","handleKeyDown","trim","valid","validateInput","addFilter","querySubmit","emit","getQueryValue","alert","handleSuggestionClick","suggestion","parts","split","inputRef","focus","filter","length","fieldName","operator","fieldArray","field","find","f","quotedValue","replace","emitQueryChange","removeFilter","index","_","i","query","queryChange","join","prefix","toLowerCase","map","startsWith","getOperatorsForType","getValuesForType","input","includes","validateValueForType","isNaN","Number","render","h","class","ref","el","inputClass","onFocus","onInput","onKeyDown","placeholder","onClick","scSpreadsheetUploaderCss","ScSpreadsheetUploaderStyle0","ScSpreadsheetUploader","storageKey","apiUrl","apiMethod","apiHeaders","parsedData","isProcessing","parseInput","textArea","rows","headers","newData","slice","row","values","rowData","forEach","header","_a","id","data","status","saveToLocalStorage","localStorage","setItem","stringify","clearData","removeItem","getHeaders","Object","assign","e","savedData","getItem","processData","Error","response","sendToAPI","errorMessage","undefined","reference","message","fetch","method","body","responseText","text","disabled","entries","scTaxonomyCss","ScTaxonomyStyle0","ScTaxonomy","allData","root","shadowRoot","handleEscapeKey","handleValueChange","newValue","valueChange","url","fetchData","line","clearTimeout","debounceTimer","window","setTimeout","term","lowerTerm","filtered","scTextareaCss","ScTextareaStyle0","ScTextarea","filteredSuggestions","showSuggestions","currentInputValue","mentionStartIndex","highlightIndex","caretCoords","top","left","suggestionUrl","lines","s","original","lower","ev","preventDefault","selectSuggestion","handleInput","caretPos","selectionStart","valueUpToCaret","substring","lastAt","lastIndexOf","updateMirror","mirrorDiv","textareaEl","valueAfterCaret","escapedValueUpToCaret","mirrorContent","innerHTML","marker","querySelector","markerRect","getBoundingClientRect","containerRect","host","beforeMention","afterCaret","newCaretPos","setSelectionRange","textareaClass","style","position","role","item","highlighted","onMouseOver"],"sources":["src/components/sc-query-field/sc-query-field.css?tag=sc-query-field&encapsulation=shadow","src/components/sc-query-field/sc-query-field.tsx","src/components/sc-spreadsheet-uploader/sc-spreadsheet-uploader.css?tag=sc-spreadsheet-uploader&encapsulation=shadow","src/components/sc-spreadsheet-uploader/sc-spreadsheet-uploader.tsx","src/components/sc-taxonomy/sc-taxonomy.css?tag=sc-taxonomy&encapsulation=shadow","src/components/sc-taxonomy/sc-taxonomy.tsx","src/components/sc-textarea/sc-textarea.css?tag=sc-textarea&encapsulation=shadow","src/components/sc-textarea/sc-textarea.tsx"],"sourcesContent":[".query-field {\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  font-family: sans-serif;\n}\n\n.tags {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n}\n\n.tag {\n  background-color: #1f4acd;\n  color: white;\n  padding: 0.25rem 0.5rem;\n  border-radius: 1rem;\n  display: inline-flex;\n  align-items: center;\n  gap: 0.25rem;\n  font-size: 0.875rem;\n}\n\n.remove-button {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 1rem;\n  cursor: pointer;\n}\n\n.input-wrapper {\n  position: relative;\n}\n\n.query-input {\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ccc;\n  border-radius: 0.375rem;\n  font-size: 1rem;\n  outline: none;\n}\n\n.query-input:focus {\n  border-color: #1f4acd;\n}\n\n.context-menu {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  background: #fff;\n  border: 1px solid #ccc;\n  border-radius: 0.375rem;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  width: 100%;\n  z-index: 100;\n  display: none;\n  margin-top: 0.25rem;\n}\n\n.context-menu.visible {\n  display: block;\n}\n\n.suggestion {\n  padding: 0.5rem;\n  cursor: pointer;\n  font-size: 0.9rem;\n}\n\n.suggestion:hover {\n  background-color: #f3f4f6;\n}","import { Component, h, State, Prop, Event, EventEmitter, Element } from '@stencil/core';\n\n@Component({\n  tag: 'sc-query-field',\n  styleUrl: 'sc-query-field.css',\n  shadow: true,\n})\nexport class ScQueryField {\n  @State() filters: string[] = [];\n  @State() inputValue: string = '';\n  @State() suggestions: string[] = [];\n  @State() currentStep: 'field' | 'operator' | 'value' = 'field';\n  @State() contextMenuVisible: boolean = false;\n\n  /**\n   * Fields can be passed as a JSON string or a parsed array of field definitions.\n   */\n  @Prop() fields: string | FieldDefinition[] = [];\n\n  /**\n   * Optional class for the input field.\n   */\n  @Prop() inputClass: string; // Optional class for textarea\n\n  /**\n   * Emitted whenever the query changes. The detail contains the current query string.\n   */\n  @Event() queryChange: EventEmitter<string>;\n\n  /**\n   * Emitted when the user submits the query (e.g., pressing Enter on a complete filter).\n   * The detail contains the final query string.\n   */\n  @Event() querySubmit: EventEmitter<string>;\n\n  @Element() hostElement: HTMLElement;\n  hiddenInput!: HTMLInputElement;\n  inputRef!: HTMLInputElement;\n\n  componentWillLoad() {\n    // Parse fields if it's a JSON string\n    if (typeof this.fields === 'string') {\n      try {\n        const parsed = JSON.parse(this.fields);\n        if (Array.isArray(parsed)) {\n          this.fields = parsed;\n        } else {\n          console.warn('Invalid fields prop: expected an array.');\n          this.fields = [];\n        }\n      } catch (error) {\n        console.error('Error parsing fields prop:', error);\n        this.fields = [];\n      }\n    }\n  }\n\n  componentDidLoad() {\n    // Create a hidden input to integrate with form submissions\n    this.hiddenInput = document.createElement('input');\n    this.hiddenInput.type = 'hidden';\n    this.hiddenInput.name = 'query';\n    this.hostElement.appendChild(this.hiddenInput);\n\n    // Close context menu on outside click\n    document.addEventListener('click', this.handleOutsideClick);\n    // Close context menu on ESC\n    document.addEventListener('keydown', this.handleKeyDownEscape);\n  }\n\n  disconnectedCallback() {\n    document.removeEventListener('click', this.handleOutsideClick);\n    document.removeEventListener('keydown', this.handleKeyDownEscape);\n  }\n\n  handleOutsideClick = (event: MouseEvent) => {\n    if (!this.hostElement.contains(event.target as Node)) {\n      this.contextMenuVisible = false;\n    }\n  };\n\n  handleKeyDownEscape = (event: KeyboardEvent) => {\n    if (event.key === 'Escape') {\n      this.contextMenuVisible = false;\n    }\n  };\n\n  handleInputFocus() {\n    this.updateSuggestions();\n    this.contextMenuVisible = true;\n  }\n\n  handleInputChange(event: Event) {\n    this.inputValue = (event.target as HTMLInputElement).value;\n    this.updateSuggestions();\n  }\n\n  handleKeyDown(event: KeyboardEvent) {\n    if (event.key === 'Enter' && this.inputValue.trim() !== '') {\n      const valid = this.validateInput(this.inputValue.trim());\n      if (valid) {\n        // Add the filter; if it's a string field, the value will be quoted inside addFilter().\n        this.addFilter(this.inputValue.trim());\n        this.inputValue = '';\n        this.contextMenuVisible = false;\n        // Emit querySubmit when a valid filter is added via Enter\n        this.querySubmit.emit(this.getQueryValue());\n      } else {\n        alert('Invalid filter. Use format: field:operator:value');\n      }\n    }\n  }\n\n  handleSuggestionClick(suggestion: string) {\n    const parts = this.inputValue.split(':');\n    if (this.currentStep === 'field') {\n      this.inputValue = `${suggestion}:`;\n    } else if (this.currentStep === 'operator') {\n      this.inputValue = `${parts[0]}:${suggestion}:`;\n    } else if (this.currentStep === 'value') {\n      this.inputValue = `${parts[0]}:${parts[1]}:${suggestion}`;\n    }\n    this.updateSuggestions();\n    this.inputRef.focus();\n  }\n\n  addFilter(filter: string) {\n    // If the field is string type, wrap the value in quotes\n    const parts = filter.split(':');\n    if (parts.length === 3) {\n      const [fieldName, operator, value] = parts;\n      const fieldArray = this.fields as FieldDefinition[];\n      const field = fieldArray.find(f => f.name === fieldName);\n\n      if (field && field.type === 'string') {\n        // Ensure the value is quoted\n        // Remove existing quotes if any, then add single quotes\n        const quotedValue = `'${value.replace(/^'|'$/g, '')}'`;\n        filter = `${fieldName}:${operator}:${quotedValue}`;\n      }\n    }\n\n    this.filters = [...this.filters, filter];\n    this.emitQueryChange();\n  }\n\n  removeFilter(index: number) {\n    this.filters = this.filters.filter((_, i) => i !== index);\n    this.emitQueryChange();\n  }\n\n  emitQueryChange() {\n    const query = this.getQueryValue();\n    this.queryChange.emit(query);\n    if (this.hiddenInput) {\n      this.hiddenInput.value = query;\n    }\n  }\n\n  getQueryValue(): string {\n    return this.filters.join(' ');\n  }\n\n  updateSuggestions() {\n    const parts = this.inputValue.split(':');\n    const fieldArray = this.fields as FieldDefinition[];\n\n    if (parts.length === 1) {\n      // Step: Selecting Field\n      this.currentStep = 'field';\n      const prefix = parts[0].toLowerCase();\n      this.suggestions = fieldArray.map(f => f.name).filter(name => prefix === '' || name.toLowerCase().startsWith(prefix));\n    } else if (parts.length === 2) {\n      // Step: Selecting Operator\n      this.currentStep = 'operator';\n      const field = fieldArray.find(f => f.name === parts[0]);\n      if (field) {\n        this.suggestions = this.getOperatorsForType(field.type);\n      } else {\n        this.suggestions = [];\n      }\n    } else if (parts.length === 3) {\n      // Step: Selecting Value\n      this.currentStep = 'value';\n      const field = fieldArray.find(f => f.name === parts[0]);\n      if (field) {\n        this.suggestions = this.getValuesForType(field.type);\n      } else {\n        this.suggestions = [];\n      }\n    } else {\n      this.suggestions = [];\n    }\n\n    this.contextMenuVisible = this.suggestions.length > 0;\n  }\n\n  validateInput(input: string): boolean {\n    const parts = input.split(':');\n    if (parts.length === 3) {\n      const [fieldName, operator, value] = parts;\n      const fieldArray = this.fields as FieldDefinition[];\n      const field = fieldArray.find(f => f.name === fieldName);\n      if (!field) return false;\n\n      if (!this.getOperatorsForType(field.type).includes(operator)) return false;\n\n      return this.validateValueForType(value, field.type);\n    }\n    return false;\n  }\n\n  getOperatorsForType(type: FieldType): string[] {\n    switch (type) {\n      case 'string':\n        return ['LIKE', '=', '!=', 'null', 'notnull'];\n      case 'bool':\n        return ['=', 'null', 'notnull'];\n      case 'number':\n        return ['>', '<', '>=', '<=', '='];\n      default:\n        return [];\n    }\n  }\n\n  getValuesForType(type: FieldType): string[] {\n    // Example static suggestions. In a real-world scenario, you might fetch these dynamically.\n    switch (type) {\n      case 'string':\n        return ['test', 'example'];\n      case 'bool':\n        return ['true', 'false'];\n      case 'number':\n        return ['0', '100', '200'];\n      default:\n        return [];\n    }\n  }\n\n  validateValueForType(value: string, type: FieldType): boolean {\n    // The user enters value without quotes initially\n    switch (type) {\n      case 'string':\n        // Just ensure it's a string (non-empty)\n        return typeof value === 'string' && value.trim() !== '';\n      case 'bool':\n        return value === 'true' || value === 'false';\n      case 'number':\n        return !isNaN(Number(value));\n      default:\n        return false;\n    }\n  }\n\n  render() {\n    return (\n      <div class=\"query-field\">\n        <div class=\"input-wrapper\">\n          <input\n            type=\"text\"\n            ref={el => (this.inputRef = el as HTMLInputElement)}\n            class={`query-input ${this.inputClass}`}\n            value={this.inputValue}\n            onFocus={() => this.handleInputFocus()}\n            onInput={event => this.handleInputChange(event)}\n            onKeyDown={event => this.handleKeyDown(event)}\n            placeholder=\"Add filters (field:operator:value)\"\n          />\n          <div class={`context-menu ${this.contextMenuVisible ? 'visible' : ''}`}>\n            {this.suggestions.map(suggestion => (\n              <div class=\"suggestion\" onClick={() => this.handleSuggestionClick(suggestion)}>\n                {suggestion}\n              </div>\n            ))}\n          </div>\n        </div>\n        <div class=\"tags\">\n          {this.filters.map((filter, index) => (\n            <span class=\"tag\">\n              {filter}\n              <button type=\"button\" class=\"remove-button\" onClick={() => this.removeFilter(index)}>\n                &times;\n              </button>\n            </span>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n",":host {\n  /* Light mode variables */\n  --background-color: #ffffff;\n  --text-color: #333333;\n  --border-color: #cccccc;\n  --input-background: #ffffff;\n  --row-border: #eeeeee;\n  --button-background: #007bff;\n  --button-color: #ffffff;\n  --button-disabled-background: #cccccc;\n  --button-disabled-color: #666666;\n  --error-color: #dc3545;\n  --success-color: #28a745;\n  --pending-color: #ffd700;\n  --reference-background: #f8f9fa;\n  --reference-color: #495057;\n}\n\n@media (prefers-color-scheme: dark) {\n  :host {\n    /* Dark mode variables */\n    --background-color: #1a1a1a;\n    --text-color: #e0e0e0;\n    --border-color: #404040;\n    --input-background: #2d2d2d;\n    --row-border: #333333;\n    --button-background: #0056b3;\n    --button-color: #ffffff;\n    --button-disabled-background: #404040;\n    --button-disabled-color: #808080;\n    --error-color: #ff4d4d;\n    --success-color: #2fb344;\n    --pending-color: #ffd700;\n    --reference-background: #2d2d2d;\n    --reference-color: #b8b8b8;\n  }\n}\n\n.container {\n  padding: 20px;\n  font-family: system-ui, -apple-system, sans-serif;\n  background-color: var(--background-color);\n  color: var(--text-color);\n}\n\n.input-section {\n  margin-bottom: 20px;\n}\n\n.button-group {\n  display: flex;\n  gap: 10px;\n}\n\ntextarea {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 10px;\n  border: 1px solid var(--border-color);\n  border-radius: 4px;\n  background-color: var(--input-background);\n  color: var(--text-color);\n}\n\ntextarea:focus {\n  outline: none;\n  border-color: var(--button-background);\n  box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);\n}\n\nbutton {\n  padding: 10px 20px;\n  background-color: var(--button-background);\n  color: var(--button-color);\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n}\n\nbutton:hover:not(:disabled) {\n  background-color: color-mix(in srgb, var(--button-background) 85%, black);\n}\n\nbutton:disabled {\n  background-color: var(--button-disabled-background);\n  color: var(--button-disabled-color);\n  cursor: not-allowed;\n}\n\n.data-grid {\n  margin-top: 20px;\n}\n\n.row {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  border: 1px solid var(--row-border);\n  margin-bottom: 5px;\n  border-radius: 4px;\n  transition: background-color 0.2s ease;\n}\n\n.row:hover {\n  background-color: color-mix(in srgb, var(--background-color) 95%, var(--text-color));\n}\n\n.status-indicator {\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  margin-right: 10px;\n  flex-shrink: 0;\n}\n\n.row.pending .status-indicator {\n  background-color: var(--pending-color);\n}\n\n.row.success .status-indicator {\n  background-color: var(--success-color);\n}\n\n.row.error .status-indicator {\n  background-color: var(--error-color);\n}\n\n.row-data {\n  flex: 1;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.row-data span {\n  padding: 2px 6px;\n  border-radius: 3px;\n  background-color: color-mix(in srgb, var(--background-color) 97%, var(--text-color));\n}\n\nspan.reference {\n  background-color: var(--reference-background);\n  color: var(--reference-color);\n  padding: 2px 8px;\n  border-radius: 4px;\n  border: 1px solid var(--border-color);\n  font-weight: 500;\n}\n\n.error-message {\n  color: var(--error-color);\n  margin-left: 10px;\n  font-size: 0.9em;\n  flex-basis: 100%;\n  margin-top: 5px;\n}","import { Component, Prop, State, h } from '@stencil/core';\n\nexport interface ApiConfig {\n  url: string;\n  method: string;\n  headers?: Record<string, string>;\n}\n\nexport interface DataRow {\n  id: string;\n  data: any;\n  status: 'pending' | 'success' | 'error';\n  errorMessage?: string;\n  reference?: string; // Added reference field\n}\n\n@Component({\n  tag: 'sc-spreadsheet-uploader',\n  styleUrl: 'sc-spreadsheet-uploader.css',\n  shadow: true,\n})\nexport class ScSpreadsheetUploader {\n  @Prop() storageKey: string = 'spreadsheet-data';\n\n  // API Properties\n  @Prop() apiUrl: string = '';\n  @Prop() apiMethod: string = 'POST';\n  @Prop() apiHeaders: string = '{}';\n\n  @State() parsedData: DataRow[] = [];\n  @State() isProcessing: boolean = false;\n  private textArea!: HTMLTextAreaElement;\n\n  private getHeaders(): Record<string, string> {\n    try {\n      return {\n        'Content-Type': 'application/json',\n        ...JSON.parse(this.apiHeaders),\n      };\n    } catch (e) {\n      console.warn('Invalid apiHeaders format, using default headers');\n      return { 'Content-Type': 'application/json' };\n    }\n  }\n\n  componentWillLoad() {\n    const savedData = localStorage.getItem(this.storageKey);\n    if (savedData) {\n      this.parsedData = JSON.parse(savedData);\n    }\n  }\n\n  private parseInput = () => {\n    const input = this.textArea.value;\n    const rows = input.trim().split('\\n');\n    const headers = rows[0].split('\\t');\n\n    const newData: DataRow[] = rows.slice(1).map((row, index) => {\n      const values = row.split('\\t');\n      const rowData = {};\n      headers.forEach((header, i) => {\n        rowData[header.trim()] = values[i]?.trim() || '';\n      });\n\n      return {\n        id: `row-${index}`,\n        data: rowData,\n        status: 'pending',\n      };\n    });\n\n    this.parsedData = newData;\n    this.saveToLocalStorage();\n  };\n\n  private saveToLocalStorage = () => {\n    localStorage.setItem(this.storageKey, JSON.stringify(this.parsedData));\n  };\n\n  private async processData() {\n    if (!this.apiUrl) {\n      throw new Error('API URL ist nicht konfiguriert');\n    }\n\n    this.isProcessing = true;\n\n    for (const row of this.parsedData) {\n      if (row.status === 'success') continue;\n\n      try {\n        const response = await this.sendToAPI(row.data);\n        row.status = 'success';\n        row.errorMessage = undefined;\n        // Store reference if it exists in the response\n        if (response && response.reference) {\n          row.reference = response.reference;\n        }\n      } catch (error) {\n        row.status = 'error';\n        row.errorMessage = error.message;\n      }\n\n      this.parsedData = [...this.parsedData];\n      this.saveToLocalStorage();\n    }\n\n    this.isProcessing = false;\n  }\n\n  private async sendToAPI(data: any) {\n    try {\n      const response = await fetch(this.apiUrl, {\n        method: this.apiMethod,\n        headers: this.getHeaders(),\n        body: JSON.stringify(data),\n      });\n\n      if (response.status !== 200 && response.status !== 201) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const responseText = await response.text();\n      if (!responseText) {\n        return {}; // Return empty object for empty response\n      }\n\n      return JSON.parse(responseText);\n    } catch (error) {\n      throw new Error(`API-Fehler: ${error.message}`);\n    }\n  }\n\n  private clearData = () => {\n    this.parsedData = [];\n    localStorage.removeItem(this.storageKey);\n    this.textArea.value = '';\n  };\n\n  render() {\n    return (\n      <div class=\"container\">\n        <div class=\"input-section\">\n          <textarea ref={el => (this.textArea = el as HTMLTextAreaElement)} placeholder=\"Füge hier deine Tabellendaten ein...\" rows={10} />\n          <div class=\"button-group\">\n            <button onClick={this.parseInput} disabled={this.isProcessing}>\n              Daten einlesen\n            </button>\n            <button onClick={this.clearData} disabled={this.isProcessing}>\n              Zurücksetzen\n            </button>\n          </div>\n        </div>\n\n        {this.parsedData.length > 0 && (\n          <div class=\"data-section\">\n            <button onClick={() => this.processData()} disabled={this.isProcessing || !this.apiUrl}>\n              {this.isProcessing ? 'Verarbeite...' : 'An API senden'}\n            </button>\n\n            <div class=\"data-grid\">\n              {this.parsedData.map(row => (\n                <div class={`row ${row.status}`} key={row.id}>\n                  <div class=\"status-indicator\"></div>\n                  <div class=\"row-data\">\n                    {Object.entries(row.data).map(([key, value]) => (\n                      <span key={key}>\n                        {key}: {value}\n                      </span>\n                    ))}\n                    {row.reference && (\n                      <span class=\"reference\">\n                        Referenz: {row.reference}\n                      </span>\n                    )}\n                  </div>\n                  {row.errorMessage && <div class=\"error-message\">{row.errorMessage}</div>}\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}",".taxonomy-container {\n  position: relative;\n  display: inline-block;\n  width: 100%;\n}\n\n.input-wrapper {\n  position: relative;\n}\n\n.taxonomy-input {\n  width: 100%;\n  box-sizing: border-box;\n  padding: 8px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\n.context-menu {\n  position: absolute;\n  top: 100%; /* directly below input */\n  left: 0;\n  width: 100%;\n  box-sizing: border-box;\n  border: 1px solid #ccc;\n  background: #fff;\n  z-index: 999;\n  max-height: 400px;\n  overflow-y: auto;\n  display: none;\n}\n\n.context-menu.visible {\n  display: block;\n}\n\n.suggestion {\n  padding: 8px;\n  cursor: pointer;\n}\n\n.suggestion:hover {\n  background: #eee;\n}","import { Component, h, State, Prop, Element, Event, EventEmitter } from '@stencil/core';\n\n@Component({\n  tag: 'sc-taxonomy',\n  styleUrl: 'sc-taxonomy.css',\n  shadow: true,\n})\nexport class ScTaxonomy {\n  @Prop() url: string;\n  @Prop() name: string;\n  @Prop() value: string; // Add this line\n\n  @State() inputValue: string = '';\n  @State() suggestions: string[] = [];\n  @State() allData: string[] = [];\n  @State() contextMenuVisible: boolean = false;\n\n  @Element() hostElement: HTMLElement;\n  inputRef!: HTMLInputElement;\n\n  @Event() valueChange: EventEmitter<string>;\n\n  handleValueChange(newValue: string) {\n    this.valueChange.emit(newValue);\n  }\n\n  private debounceTimer: number;\n\n  async componentWillLoad() {\n    if (this.url) {\n      await this.fetchData();\n    }\n    if (this.value) {\n      this.inputValue = this.value; // Set the initial value\n    }\n  }\n\n  componentDidLoad() {\n    document.addEventListener('click', this.handleOutsideClick);\n    document.addEventListener('keydown', this.handleEscapeKey);\n  }\n\n  disconnectedCallback() {\n    document.removeEventListener('click', this.handleOutsideClick);\n    document.removeEventListener('keydown', this.handleEscapeKey);\n  }\n\n  private handleOutsideClick = (event: MouseEvent) => {\n    const root = this.hostElement.shadowRoot;\n    if (root && !root.contains(event.target as Node)) {\n      this.contextMenuVisible = false;\n    }\n  };\n\n  private handleEscapeKey = (event: KeyboardEvent) => {\n    if (event.key === 'Escape') {\n      this.contextMenuVisible = false;\n    }\n  };\n\n  async fetchData() {\n    try {\n      const response = await fetch(this.url);\n      const text = await response.text();\n      this.allData = text\n        .split('\\n')\n        .map(line => line.trim())\n        .filter(line => line !== '');\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      this.allData = [];\n    }\n  }\n\n  handleInputFocus() {\n    // On focus, don't show suggestions if empty. Wait until user types.\n    if (this.inputValue.length > 0) {\n      this.updateSuggestions(this.inputValue);\n    }\n  }\n\n  handleInputChange(event: Event) {\n    const value = (event.target as HTMLInputElement).value;\n    this.inputValue = value;\n\n    clearTimeout(this.debounceTimer);\n    this.debounceTimer = window.setTimeout(() => {\n      this.updateSuggestions(value);\n    }, 100);\n  }\n\n  handleKeyDown(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      // Close the menu on Enter if you wish:\n      // this.contextMenuVisible = false;\n    }\n  }\n\n  handleSuggestionClick(suggestion: string) {\n    this.inputValue = suggestion;\n    this.handleValueChange(suggestion);\n    this.inputRef.value = suggestion;\n    this.inputRef.focus();\n  }\n\n  updateSuggestions(term: string) {\n    if (term.trim().length === 0) {\n      // If no input, no suggestions\n      this.suggestions = [];\n      this.contextMenuVisible = false;\n    } else {\n      const lowerTerm = term.toLowerCase();\n      const filtered = this.allData.filter(line => line.toLowerCase().includes(lowerTerm));\n      // Limit the number of suggestions for performance if needed:\n      this.suggestions = filtered.slice(0, 100);\n      this.contextMenuVisible = this.suggestions.length > 0;\n    }\n  }\n\n  render() {\n    return (\n      <div class=\"taxonomy-container\">\n        <div class=\"input-wrapper\">\n          <input\n            type=\"text\"\n            ref={el => (this.inputRef = el as HTMLInputElement)}\n            class=\"taxonomy-input\"\n            name={this.name}\n            value={this.inputValue}\n            onFocus={() => this.handleInputFocus()}\n            onInput={event => this.handleInputChange(event)}\n            onKeyDown={event => this.handleKeyDown(event)}\n            placeholder=\"Type to search...\"\n          />\n          <div class={`context-menu ${this.contextMenuVisible ? 'visible' : ''}`}>\n            {this.suggestions.map(suggestion => (\n              <div class=\"suggestion\" onClick={() => this.handleSuggestionClick(suggestion)}>\n                {suggestion}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n",":host {\n  display: inline-block;\n  position: relative;\n  width: 300px;\n  font-size: 14px;\n  font-family: sans-serif;\n}\n\n.sc-textarea-container {\n  position: relative;\n  width: 100%;\n}\n\n/* Textarea */\n.sc-textarea-input {\n  width: 100%;\n  height: 100px;\n  box-sizing: border-box;\n  padding: 5px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font: inherit;\n}\n\n/* Mirror to calculate caret position */\n.sc-textarea-mirror {\n  position: absolute;\n  visibility: hidden;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n  top: 0;\n  left: 0;\n  z-index: -9999;\n  font: inherit;\n  line-height: normal;\n  width: 100%;\n  padding: 5px;\n  border: 1px solid transparent;\n  box-sizing: border-box;\n}\n\n/* Suggestions Menu */\n.sc-textarea-suggestions {\n  background: #fff;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  max-height: 200px;\n  overflow-y: auto;\n  z-index: 999;\n}\n\n.sc-textarea-suggestion-item {\n  padding: 5px 8px;\n  cursor: pointer;\n  font-size: 14px;\n  font-family: sans-serif;\n}\n\n.sc-textarea-suggestion-item:hover,\n.sc-textarea-suggestion-item.highlighted {\n  background-color: #eee;\n}","import { Component, h, State, Prop, Listen, Element } from '@stencil/core';\n\n@Component({\n  tag: 'sc-textarea',\n  styleUrl: 'sc-textarea.css',\n  shadow: true\n})\nexport class ScTextarea {\n  @Prop() suggestionUrl: string;\n  @Prop() textareaClass: string; // Optional class for textarea\n\n  @State() suggestions: { original: string; lower: string }[] = [];\n  @State() filteredSuggestions: string[] = [];\n  @State() showSuggestions: boolean = false;\n  @State() currentInputValue: string = '';\n  @State() mentionStartIndex: number = -1;\n  @State() highlightIndex: number = 0;\n  @State() caretCoords: { top: number; left: number } = { top: 0, left: 0 };\n\n  @Element() el: HTMLElement;\n\n  private textareaEl: HTMLTextAreaElement;\n  private mirrorDiv: HTMLDivElement;\n\n  async componentWillLoad() {\n    const response = await fetch(this.suggestionUrl);\n    const text = await response.text();\n    const lines = text\n      .split('\\n')\n      .map(s => s.trim())\n      .filter(s => s.length > 0);\n\n    // Pre-store lowercase versions for faster filtering\n    this.suggestions = lines.map(s => ({ original: s, lower: s.toLowerCase() }));\n  }\n\n  @Listen('keydown', { target: 'window' })\n  handleKeyDown(ev: KeyboardEvent) {\n    if (!this.showSuggestions) return;\n    if (ev.key === 'ArrowDown') {\n      ev.preventDefault();\n      this.highlightIndex = (this.highlightIndex + 1) % this.filteredSuggestions.length;\n    } else if (ev.key === 'ArrowUp') {\n      ev.preventDefault();\n      this.highlightIndex = (this.highlightIndex - 1 + this.filteredSuggestions.length) % this.filteredSuggestions.length;\n    } else if (ev.key === 'Enter') {\n      ev.preventDefault();\n      this.selectSuggestion(this.filteredSuggestions[this.highlightIndex]);\n    } else if (ev.key === 'Escape') {\n      this.showSuggestions = false;\n    }\n  }\n\n  handleInput(e: Event) {\n    const target = e.target as HTMLTextAreaElement;\n    this.currentInputValue = target.value;\n\n    const caretPos = target.selectionStart;\n    const valueUpToCaret = target.value.substring(0, caretPos);\n    const lastAt = valueUpToCaret.lastIndexOf('@');\n\n    if (lastAt > -1) {\n      const query = valueUpToCaret.substring(lastAt + 1).toLowerCase();\n      // Filter suggestions (limit to top 10 for performance)\n      const filtered = this.suggestions\n        .filter(s => s.lower.startsWith(query))\n        .slice(0, 10)\n        .map(s => s.original);\n\n      this.filteredSuggestions = filtered;\n      this.showSuggestions = filtered.length > 0;\n      this.mentionStartIndex = lastAt;\n      this.highlightIndex = 0;\n    } else {\n      this.showSuggestions = false;\n    }\n\n    // Update mirror for caret positioning\n    this.updateMirror();\n  }\n\n  updateMirror() {\n    if (!this.mirrorDiv || !this.textareaEl) return;\n\n    const value = this.currentInputValue;\n    const caretPos = this.textareaEl.selectionStart;\n    const valueUpToCaret = value.substring(0, caretPos);\n    const valueAfterCaret = value.substring(caretPos);\n\n    // We insert a caret marker span at the caret position in the mirrored text\n    const escapedValueUpToCaret = valueUpToCaret\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\\n/g, '<br/> ');\n\n    // Use a marker to indicate caret position\n    const mirrorContent = escapedValueUpToCaret + '<span id=\"caret-marker\">&#8203;</span>' +\n      valueAfterCaret\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\\n/g, '<br/> ');\n\n    this.mirrorDiv.innerHTML = mirrorContent;\n\n    // Now measure the caret position\n    const marker = this.mirrorDiv.querySelector('#caret-marker') as HTMLElement;\n    if (marker) {\n      const markerRect = marker.getBoundingClientRect();\n      const containerRect = this.el.shadowRoot.host.getBoundingClientRect();\n      this.caretCoords = {\n        top: markerRect.top - containerRect.top,\n        left: markerRect.left - containerRect.left\n      };\n    }\n  }\n\n  selectSuggestion(suggestion: string) {\n    const value = this.currentInputValue;\n    const beforeMention = value.substring(0, this.mentionStartIndex);\n    const caretPos = this.textareaEl.selectionStart;\n    const afterCaret = value.substring(caretPos);\n    const newValue = beforeMention + '@' + suggestion + ' ' + afterCaret;\n    this.currentInputValue = newValue;\n    this.showSuggestions = false;\n\n    const newCaretPos = (beforeMention + '@' + suggestion + ' ').length;\n    this.textareaEl.value = newValue;\n    this.textareaEl.setSelectionRange(newCaretPos, newCaretPos);\n    this.textareaEl.focus();\n    this.updateMirror();\n  }\n\n  componentDidLoad() {\n    // Initialize mirror once component is loaded\n    this.updateMirror();\n  }\n\n  render() {\n    const { top, left } = this.caretCoords;\n    return (\n      <div class=\"sc-textarea-container\">\n        <textarea\n          ref={el => this.textareaEl = el}\n          value={this.currentInputValue}\n          onInput={(e) => this.handleInput(e)}\n          class={`sc-textarea-input ${this.textareaClass}`}\n        ></textarea>\n\n        <div class=\"sc-textarea-mirror\" ref={el => this.mirrorDiv = el}></div>\n\n        { this.showSuggestions && this.filteredSuggestions.length > 0 && (\n          <ul \n            class=\"sc-textarea-suggestions\"\n            style={{\n              position: 'absolute',\n              top: `${top + 20}px`, // Slight offset below the cursor\n              left: `${left}px`\n            }} \n            role=\"listbox\"\n          >\n            {this.filteredSuggestions.map((item, index) => (\n              <li \n                class={{\n                  'sc-textarea-suggestion-item': true,\n                  'highlighted': index === this.highlightIndex\n                }}\n                role=\"option\"\n                onClick={() => this.selectSuggestion(item)}\n                onMouseOver={() => this.highlightIndex = index}\n              >\n                {item}\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    );\n  }\n}"],"mappings":"yDAAA,MAAMA,EAAkB,g4BACxB,MAAAC,EAAeD,E,MCMFE,EAAY,MALzB,WAAAC,CAAAC,G,4FAMWC,KAAAC,QAAoB,GACpBD,KAAAE,WAAqB,GACrBF,KAAAG,YAAwB,GACxBH,KAAAI,YAA8C,QAC9CJ,KAAAK,mBAA8B,MAK/BL,KAAAM,OAAqC,GA0D7CN,KAAAO,mBAAsBC,IACpB,IAAKR,KAAKS,YAAYC,SAASF,EAAMG,QAAiB,CACpDX,KAAKK,mBAAqB,K,GAI9BL,KAAAY,oBAAuBJ,IACrB,GAAIA,EAAMK,MAAQ,SAAU,CAC1Bb,KAAKK,mBAAqB,K,GA5C9B,iBAAAS,GAEE,UAAWd,KAAKM,SAAW,SAAU,CACnC,IACE,MAAMS,EAASC,KAAKC,MAAMjB,KAAKM,QAC/B,GAAIY,MAAMC,QAAQJ,GAAS,CACzBf,KAAKM,OAASS,C,KACT,CACLK,QAAQC,KAAK,2CACbrB,KAAKM,OAAS,E,EAEhB,MAAOgB,GACPF,QAAQE,MAAM,6BAA8BA,GAC5CtB,KAAKM,OAAS,E,GAKpB,gBAAAiB,GAEEvB,KAAKwB,YAAcC,SAASC,cAAc,SAC1C1B,KAAKwB,YAAYG,KAAO,SACxB3B,KAAKwB,YAAYI,KAAO,QACxB5B,KAAKS,YAAYoB,YAAY7B,KAAKwB,aAGlCC,SAASK,iBAAiB,QAAS9B,KAAKO,oBAExCkB,SAASK,iBAAiB,UAAW9B,KAAKY,oB,CAG5C,oBAAAmB,GACEN,SAASO,oBAAoB,QAAShC,KAAKO,oBAC3CkB,SAASO,oBAAoB,UAAWhC,KAAKY,oB,CAe/C,gBAAAqB,GACEjC,KAAKkC,oBACLlC,KAAKK,mBAAqB,I,CAG5B,iBAAA8B,CAAkB3B,GAChBR,KAAKE,WAAcM,EAAMG,OAA4ByB,MACrDpC,KAAKkC,mB,CAGP,aAAAG,CAAc7B,GACZ,GAAIA,EAAMK,MAAQ,SAAWb,KAAKE,WAAWoC,SAAW,GAAI,CAC1D,MAAMC,EAAQvC,KAAKwC,cAAcxC,KAAKE,WAAWoC,QACjD,GAAIC,EAAO,CAETvC,KAAKyC,UAAUzC,KAAKE,WAAWoC,QAC/BtC,KAAKE,WAAa,GAClBF,KAAKK,mBAAqB,MAE1BL,KAAK0C,YAAYC,KAAK3C,KAAK4C,gB,KACtB,CACLC,MAAM,mD,GAKZ,qBAAAC,CAAsBC,GACpB,MAAMC,EAAQhD,KAAKE,WAAW+C,MAAM,KACpC,GAAIjD,KAAKI,cAAgB,QAAS,CAChCJ,KAAKE,WAAa,GAAG6C,I,MAChB,GAAI/C,KAAKI,cAAgB,WAAY,CAC1CJ,KAAKE,WAAa,GAAG8C,EAAM,MAAMD,I,MAC5B,GAAI/C,KAAKI,cAAgB,QAAS,CACvCJ,KAAKE,WAAa,GAAG8C,EAAM,MAAMA,EAAM,MAAMD,G,CAE/C/C,KAAKkC,oBACLlC,KAAKkD,SAASC,O,CAGhB,SAAAV,CAAUW,GAER,MAAMJ,EAAQI,EAAOH,MAAM,KAC3B,GAAID,EAAMK,SAAW,EAAG,CACtB,MAAOC,EAAWC,EAAUnB,GAASY,EACrC,MAAMQ,EAAaxD,KAAKM,OACxB,MAAMmD,EAAQD,EAAWE,MAAKC,GAAKA,EAAE/B,OAAS0B,IAE9C,GAAIG,GAASA,EAAM9B,OAAS,SAAU,CAGpC,MAAMiC,EAAc,IAAIxB,EAAMyB,QAAQ,SAAU,OAChDT,EAAS,GAAGE,KAAaC,KAAYK,G,EAIzC5D,KAAKC,QAAU,IAAID,KAAKC,QAASmD,GACjCpD,KAAK8D,iB,CAGP,YAAAC,CAAaC,GACXhE,KAAKC,QAAUD,KAAKC,QAAQmD,QAAO,CAACa,EAAGC,IAAMA,IAAMF,IACnDhE,KAAK8D,iB,CAGP,eAAAA,GACE,MAAMK,EAAQnE,KAAK4C,gBACnB5C,KAAKoE,YAAYzB,KAAKwB,GACtB,GAAInE,KAAKwB,YAAa,CACpBxB,KAAKwB,YAAYY,MAAQ+B,C,EAI7B,aAAAvB,GACE,OAAO5C,KAAKC,QAAQoE,KAAK,I,CAG3B,iBAAAnC,GACE,MAAMc,EAAQhD,KAAKE,WAAW+C,MAAM,KACpC,MAAMO,EAAaxD,KAAKM,OAExB,GAAI0C,EAAMK,SAAW,EAAG,CAEtBrD,KAAKI,YAAc,QACnB,MAAMkE,EAAStB,EAAM,GAAGuB,cACxBvE,KAAKG,YAAcqD,EAAWgB,KAAIb,GAAKA,EAAE/B,OAAMwB,QAAOxB,GAAQ0C,IAAW,IAAM1C,EAAK2C,cAAcE,WAAWH,I,MACxG,GAAItB,EAAMK,SAAW,EAAG,CAE7BrD,KAAKI,YAAc,WACnB,MAAMqD,EAAQD,EAAWE,MAAKC,GAAKA,EAAE/B,OAASoB,EAAM,KACpD,GAAIS,EAAO,CACTzD,KAAKG,YAAcH,KAAK0E,oBAAoBjB,EAAM9B,K,KAC7C,CACL3B,KAAKG,YAAc,E,OAEhB,GAAI6C,EAAMK,SAAW,EAAG,CAE7BrD,KAAKI,YAAc,QACnB,MAAMqD,EAAQD,EAAWE,MAAKC,GAAKA,EAAE/B,OAASoB,EAAM,KACpD,GAAIS,EAAO,CACTzD,KAAKG,YAAcH,KAAK2E,iBAAiBlB,EAAM9B,K,KAC1C,CACL3B,KAAKG,YAAc,E,MAEhB,CACLH,KAAKG,YAAc,E,CAGrBH,KAAKK,mBAAqBL,KAAKG,YAAYkD,OAAS,C,CAGtD,aAAAb,CAAcoC,GACZ,MAAM5B,EAAQ4B,EAAM3B,MAAM,KAC1B,GAAID,EAAMK,SAAW,EAAG,CACtB,MAAOC,EAAWC,EAAUnB,GAASY,EACrC,MAAMQ,EAAaxD,KAAKM,OACxB,MAAMmD,EAAQD,EAAWE,MAAKC,GAAKA,EAAE/B,OAAS0B,IAC9C,IAAKG,EAAO,OAAO,MAEnB,IAAKzD,KAAK0E,oBAAoBjB,EAAM9B,MAAMkD,SAAStB,GAAW,OAAO,MAErE,OAAOvD,KAAK8E,qBAAqB1C,EAAOqB,EAAM9B,K,CAEhD,OAAO,K,CAGT,mBAAA+C,CAAoB/C,GAClB,OAAQA,GACN,IAAK,SACH,MAAO,CAAC,OAAQ,IAAK,KAAM,OAAQ,WACrC,IAAK,OACH,MAAO,CAAC,IAAK,OAAQ,WACvB,IAAK,SACH,MAAO,CAAC,IAAK,IAAK,KAAM,KAAM,KAChC,QACE,MAAO,G,CAIb,gBAAAgD,CAAiBhD,GAEf,OAAQA,GACN,IAAK,SACH,MAAO,CAAC,OAAQ,WAClB,IAAK,OACH,MAAO,CAAC,OAAQ,SAClB,IAAK,SACH,MAAO,CAAC,IAAK,MAAO,OACtB,QACE,MAAO,G,CAIb,oBAAAmD,CAAqB1C,EAAeT,GAElC,OAAQA,GACN,IAAK,SAEH,cAAcS,IAAU,UAAYA,EAAME,SAAW,GACvD,IAAK,OACH,OAAOF,IAAU,QAAUA,IAAU,QACvC,IAAK,SACH,OAAQ2C,MAAMC,OAAO5C,IACvB,QACE,OAAO,M,CAIb,MAAA6C,GACE,OACEC,EAAA,OAAArE,IAAA,2CAAKsE,MAAM,eACTD,EAAA,OAAArE,IAAA,2CAAKsE,MAAM,iBACTD,EAAA,SAAArE,IAAA,2CACEc,KAAK,OACLyD,IAAKC,GAAOrF,KAAKkD,SAAWmC,EAC5BF,MAAO,eAAenF,KAAKsF,aAC3BlD,MAAOpC,KAAKE,WACZqF,QAAS,IAAMvF,KAAKiC,mBACpBuD,QAAShF,GAASR,KAAKmC,kBAAkB3B,GACzCiF,UAAWjF,GAASR,KAAKqC,cAAc7B,GACvCkF,YAAY,uCAEdR,EAAA,OAAArE,IAAA,2CAAKsE,MAAO,gBAAgBnF,KAAKK,mBAAqB,UAAY,MAC/DL,KAAKG,YAAYqE,KAAIzB,GACpBmC,EAAA,OAAKC,MAAM,aAAaQ,QAAS,IAAM3F,KAAK8C,sBAAsBC,IAC/DA,OAKTmC,EAAA,OAAArE,IAAA,2CAAKsE,MAAM,QACRnF,KAAKC,QAAQuE,KAAI,CAACpB,EAAQY,IACzBkB,EAAA,QAAMC,MAAM,OACT/B,EACD8B,EAAA,UAAQvD,KAAK,SAASwD,MAAM,gBAAgBQ,QAAS,IAAM3F,KAAK+D,aAAaC,IAAM,S,8CCxRjG,MAAM4B,EAA2B,2pFACjC,MAAAC,EAAeD,E,MCoBFE,EAAqB,MALlC,WAAAhG,CAAAC,G,UAMUC,KAAA+F,WAAqB,mBAGrB/F,KAAAgG,OAAiB,GACjBhG,KAAAiG,UAAoB,OACpBjG,KAAAkG,WAAqB,KAEpBlG,KAAAmG,WAAwB,GACxBnG,KAAAoG,aAAwB,MAsBzBpG,KAAAqG,WAAa,KACnB,MAAMzB,EAAQ5E,KAAKsG,SAASlE,MAC5B,MAAMmE,EAAO3B,EAAMtC,OAAOW,MAAM,MAChC,MAAMuD,EAAUD,EAAK,GAAGtD,MAAM,MAE9B,MAAMwD,EAAqBF,EAAKG,MAAM,GAAGlC,KAAI,CAACmC,EAAK3C,KACjD,MAAM4C,EAASD,EAAI1D,MAAM,MACzB,MAAM4D,EAAU,GAChBL,EAAQM,SAAQ,CAACC,EAAQ7C,K,MACvB2C,EAAQE,EAAOzE,UAAU0E,EAAAJ,EAAO1C,MAAE,MAAA8C,SAAA,SAAAA,EAAE1E,SAAU,EAAE,IAGlD,MAAO,CACL2E,GAAI,OAAOjD,IACXkD,KAAML,EACNM,OAAQ,UACT,IAGHnH,KAAKmG,WAAaM,EAClBzG,KAAKoH,oBAAoB,EAGnBpH,KAAAoH,mBAAqB,KAC3BC,aAAaC,QAAQtH,KAAK+F,WAAY/E,KAAKuG,UAAUvH,KAAKmG,YAAY,EAwDhEnG,KAAAwH,UAAY,KAClBxH,KAAKmG,WAAa,GAClBkB,aAAaI,WAAWzH,KAAK+F,YAC7B/F,KAAKsG,SAASlE,MAAQ,EAAE,C,CAtGlB,UAAAsF,GACN,IACE,OAAAC,OAAAC,OAAA,CACE,eAAgB,oBACb5G,KAAKC,MAAMjB,KAAKkG,Y,CAErB,MAAO2B,GACPzG,QAAQC,KAAK,oDACb,MAAO,CAAE,eAAgB,mB,EAI7B,iBAAAP,GACE,MAAMgH,EAAYT,aAAaU,QAAQ/H,KAAK+F,YAC5C,GAAI+B,EAAW,CACb9H,KAAKmG,WAAanF,KAAKC,MAAM6G,E,EA+BzB,iBAAME,GACZ,IAAKhI,KAAKgG,OAAQ,CAChB,MAAM,IAAIiC,MAAM,iC,CAGlBjI,KAAKoG,aAAe,KAEpB,IAAK,MAAMO,KAAO3G,KAAKmG,WAAY,CACjC,GAAIQ,EAAIQ,SAAW,UAAW,SAE9B,IACE,MAAMe,QAAiBlI,KAAKmI,UAAUxB,EAAIO,MAC1CP,EAAIQ,OAAS,UACbR,EAAIyB,aAAeC,UAEnB,GAAIH,GAAYA,EAASI,UAAW,CAClC3B,EAAI2B,UAAYJ,EAASI,S,EAE3B,MAAOhH,GACPqF,EAAIQ,OAAS,QACbR,EAAIyB,aAAe9G,EAAMiH,O,CAG3BvI,KAAKmG,WAAa,IAAInG,KAAKmG,YAC3BnG,KAAKoH,oB,CAGPpH,KAAKoG,aAAe,K,CAGd,eAAM+B,CAAUjB,GACtB,IACE,MAAMgB,QAAiBM,MAAMxI,KAAKgG,OAAQ,CACxCyC,OAAQzI,KAAKiG,UACbO,QAASxG,KAAK0H,aACdgB,KAAM1H,KAAKuG,UAAUL,KAGvB,GAAIgB,EAASf,SAAW,KAAOe,EAASf,SAAW,IAAK,CACtD,MAAM,IAAIc,MAAM,uBAAuBC,EAASf,S,CAGlD,MAAMwB,QAAqBT,EAASU,OACpC,IAAKD,EAAc,CACjB,MAAO,E,CAGT,OAAO3H,KAAKC,MAAM0H,E,CAClB,MAAOrH,GACP,MAAM,IAAI2G,MAAM,eAAe3G,EAAMiH,U,EAUzC,MAAAtD,GACE,OACEC,EAAA,OAAArE,IAAA,2CAAKsE,MAAM,aACTD,EAAA,OAAArE,IAAA,2CAAKsE,MAAM,iBACTD,EAAA,YAAArE,IAAA,2CAAUuE,IAAKC,GAAOrF,KAAKsG,SAAWjB,EAA4BK,YAAY,uCAAuCa,KAAM,KAC3HrB,EAAA,OAAArE,IAAA,2CAAKsE,MAAM,gBACTD,EAAA,UAAArE,IAAA,2CAAQ8E,QAAS3F,KAAKqG,WAAYwC,SAAU7I,KAAKoG,cAAY,kBAG7DlB,EAAA,UAAArE,IAAA,2CAAQ8E,QAAS3F,KAAKwH,UAAWqB,SAAU7I,KAAKoG,cAAY,kBAM/DpG,KAAKmG,WAAW9C,OAAS,GACxB6B,EAAA,OAAArE,IAAA,2CAAKsE,MAAM,gBACTD,EAAA,UAAArE,IAAA,2CAAQ8E,QAAS,IAAM3F,KAAKgI,cAAea,SAAU7I,KAAKoG,eAAiBpG,KAAKgG,QAC7EhG,KAAKoG,aAAe,gBAAkB,iBAGzClB,EAAA,OAAArE,IAAA,2CAAKsE,MAAM,aACRnF,KAAKmG,WAAW3B,KAAImC,GACnBzB,EAAA,OAAKC,MAAO,OAAOwB,EAAIQ,SAAUtG,IAAK8F,EAAIM,IACxC/B,EAAA,OAAKC,MAAM,qBACXD,EAAA,OAAKC,MAAM,YACRwC,OAAOmB,QAAQnC,EAAIO,MAAM1C,KAAI,EAAE3D,EAAKuB,KACnC8C,EAAA,QAAMrE,IAAKA,GACRA,EAAG,KAAIuB,KAGXuE,EAAI2B,WACHpD,EAAA,QAAMC,MAAM,aAAW,aACVwB,EAAI2B,YAIpB3B,EAAIyB,cAAgBlD,EAAA,OAAKC,MAAM,iBAAiBwB,EAAIyB,mB,aC/KvE,MAAMW,EAAgB,6eACtB,MAAAC,EAAeD,E,MCMFE,EAAU,MALvB,WAAAnJ,CAAAC,G,mDAUWC,KAAAE,WAAqB,GACrBF,KAAAG,YAAwB,GACxBH,KAAAkJ,QAAoB,GACpBlJ,KAAAK,mBAA8B,MAgC/BL,KAAAO,mBAAsBC,IAC5B,MAAM2I,EAAOnJ,KAAKS,YAAY2I,WAC9B,GAAID,IAASA,EAAKzI,SAASF,EAAMG,QAAiB,CAChDX,KAAKK,mBAAqB,K,GAItBL,KAAAqJ,gBAAmB7I,IACzB,GAAIA,EAAMK,MAAQ,SAAU,CAC1Bb,KAAKK,mBAAqB,K,GAlC9B,iBAAAiJ,CAAkBC,GAChBvJ,KAAKwJ,YAAY7G,KAAK4G,E,CAKxB,uBAAMzI,GACJ,GAAId,KAAKyJ,IAAK,OACNzJ,KAAK0J,W,CAEb,GAAI1J,KAAKoC,MAAO,CACdpC,KAAKE,WAAaF,KAAKoC,K,EAI3B,gBAAAb,GACEE,SAASK,iBAAiB,QAAS9B,KAAKO,oBACxCkB,SAASK,iBAAiB,UAAW9B,KAAKqJ,gB,CAG5C,oBAAAtH,GACEN,SAASO,oBAAoB,QAAShC,KAAKO,oBAC3CkB,SAASO,oBAAoB,UAAWhC,KAAKqJ,gB,CAgB/C,eAAMK,GACJ,IACE,MAAMxB,QAAiBM,MAAMxI,KAAKyJ,KAClC,MAAMb,QAAaV,EAASU,OAC5B5I,KAAKkJ,QAAUN,EACZ3F,MAAM,MACNuB,KAAImF,GAAQA,EAAKrH,SACjBc,QAAOuG,GAAQA,IAAS,I,CAC3B,MAAOrI,GACPF,QAAQE,MAAM,uBAAwBA,GACtCtB,KAAKkJ,QAAU,E,EAInB,gBAAAjH,GAEE,GAAIjC,KAAKE,WAAWmD,OAAS,EAAG,CAC9BrD,KAAKkC,kBAAkBlC,KAAKE,W,EAIhC,iBAAAiC,CAAkB3B,GAChB,MAAM4B,EAAS5B,EAAMG,OAA4ByB,MACjDpC,KAAKE,WAAakC,EAElBwH,aAAa5J,KAAK6J,eAClB7J,KAAK6J,cAAgBC,OAAOC,YAAW,KACrC/J,KAAKkC,kBAAkBE,EAAM,GAC5B,I,CAGL,aAAAC,CAAc7B,G,CAOd,qBAAAsC,CAAsBC,GACpB/C,KAAKE,WAAa6C,EAClB/C,KAAKsJ,kBAAkBvG,GACvB/C,KAAKkD,SAASd,MAAQW,EACtB/C,KAAKkD,SAASC,O,CAGhB,iBAAAjB,CAAkB8H,GAChB,GAAIA,EAAK1H,OAAOe,SAAW,EAAG,CAE5BrD,KAAKG,YAAc,GACnBH,KAAKK,mBAAqB,K,KACrB,CACL,MAAM4J,EAAYD,EAAKzF,cACvB,MAAM2F,EAAWlK,KAAKkJ,QAAQ9F,QAAOuG,GAAQA,EAAKpF,cAAcM,SAASoF,KAEzEjK,KAAKG,YAAc+J,EAASxD,MAAM,EAAG,KACrC1G,KAAKK,mBAAqBL,KAAKG,YAAYkD,OAAS,C,EAIxD,MAAA4B,GACE,OACEC,EAAA,OAAArE,IAAA,2CAAKsE,MAAM,sBACTD,EAAA,OAAArE,IAAA,2CAAKsE,MAAM,iBACTD,EAAA,SAAArE,IAAA,2CACEc,KAAK,OACLyD,IAAKC,GAAOrF,KAAKkD,SAAWmC,EAC5BF,MAAM,iBACNvD,KAAM5B,KAAK4B,KACXQ,MAAOpC,KAAKE,WACZqF,QAAS,IAAMvF,KAAKiC,mBACpBuD,QAAShF,GAASR,KAAKmC,kBAAkB3B,GACzCiF,UAAWjF,GAASR,KAAKqC,cAAc7B,GACvCkF,YAAY,sBAEdR,EAAA,OAAArE,IAAA,2CAAKsE,MAAO,gBAAgBnF,KAAKK,mBAAqB,UAAY,MAC/DL,KAAKG,YAAYqE,KAAIzB,GACpBmC,EAAA,OAAKC,MAAM,aAAaQ,QAAS,IAAM3F,KAAK8C,sBAAsBC,IAC/DA,O,8CCzIjB,MAAMoH,EAAgB,63BACtB,MAAAC,EAAeD,E,MCMFE,EAAU,MALvB,WAAAvK,CAAAC,G,UASWC,KAAAG,YAAqD,GACrDH,KAAAsK,oBAAgC,GAChCtK,KAAAuK,gBAA2B,MAC3BvK,KAAAwK,kBAA4B,GAC5BxK,KAAAyK,mBAA6B,EAC7BzK,KAAA0K,eAAyB,EACzB1K,KAAA2K,YAA6C,CAAEC,IAAK,EAAGC,KAAM,E,CAOtE,uBAAM/J,GACJ,MAAMoH,QAAiBM,MAAMxI,KAAK8K,eAClC,MAAMlC,QAAaV,EAASU,OAC5B,MAAMmC,EAAQnC,EACX3F,MAAM,MACNuB,KAAIwG,GAAKA,EAAE1I,SACXc,QAAO4H,GAAKA,EAAE3H,OAAS,IAG1BrD,KAAKG,YAAc4K,EAAMvG,KAAIwG,IAAC,CAAOC,SAAUD,EAAGE,MAAOF,EAAEzG,iB,CAI7D,aAAAlC,CAAc8I,GACZ,IAAKnL,KAAKuK,gBAAiB,OAC3B,GAAIY,EAAGtK,MAAQ,YAAa,CAC1BsK,EAAGC,iBACHpL,KAAK0K,gBAAkB1K,KAAK0K,eAAiB,GAAK1K,KAAKsK,oBAAoBjH,M,MACtE,GAAI8H,EAAGtK,MAAQ,UAAW,CAC/BsK,EAAGC,iBACHpL,KAAK0K,gBAAkB1K,KAAK0K,eAAiB,EAAI1K,KAAKsK,oBAAoBjH,QAAUrD,KAAKsK,oBAAoBjH,M,MACxG,GAAI8H,EAAGtK,MAAQ,QAAS,CAC7BsK,EAAGC,iBACHpL,KAAKqL,iBAAiBrL,KAAKsK,oBAAoBtK,KAAK0K,gB,MAC/C,GAAIS,EAAGtK,MAAQ,SAAU,CAC9Bb,KAAKuK,gBAAkB,K,EAI3B,WAAAe,CAAYzD,GACV,MAAMlH,EAASkH,EAAElH,OACjBX,KAAKwK,kBAAoB7J,EAAOyB,MAEhC,MAAMmJ,EAAW5K,EAAO6K,eACxB,MAAMC,EAAiB9K,EAAOyB,MAAMsJ,UAAU,EAAGH,GACjD,MAAMI,EAASF,EAAeG,YAAY,KAE1C,GAAID,GAAU,EAAG,CACf,MAAMxH,EAAQsH,EAAeC,UAAUC,EAAS,GAAGpH,cAEnD,MAAM2F,EAAWlK,KAAKG,YACnBiD,QAAO4H,GAAKA,EAAEE,MAAMzG,WAAWN,KAC/BuC,MAAM,EAAG,IACTlC,KAAIwG,GAAKA,EAAEC,WAEdjL,KAAKsK,oBAAsBJ,EAC3BlK,KAAKuK,gBAAkBL,EAAS7G,OAAS,EACzCrD,KAAKyK,kBAAoBkB,EACzB3L,KAAK0K,eAAiB,C,KACjB,CACL1K,KAAKuK,gBAAkB,K,CAIzBvK,KAAK6L,c,CAGP,YAAAA,GACE,IAAK7L,KAAK8L,YAAc9L,KAAK+L,WAAY,OAEzC,MAAM3J,EAAQpC,KAAKwK,kBACnB,MAAMe,EAAWvL,KAAK+L,WAAWP,eACjC,MAAMC,EAAiBrJ,EAAMsJ,UAAU,EAAGH,GAC1C,MAAMS,EAAkB5J,EAAMsJ,UAAUH,GAGxC,MAAMU,EAAwBR,EAC3B5H,QAAQ,KAAM,SACdA,QAAQ,KAAM,QACdA,QAAQ,KAAM,QACdA,QAAQ,MAAO,UAGlB,MAAMqI,EAAgBD,EAAwB,yCAC5CD,EACGnI,QAAQ,KAAM,SACdA,QAAQ,KAAM,QACdA,QAAQ,KAAM,QACdA,QAAQ,MAAO,UAEpB7D,KAAK8L,UAAUK,UAAYD,EAG3B,MAAME,EAASpM,KAAK8L,UAAUO,cAAc,iBAC5C,GAAID,EAAQ,CACV,MAAME,EAAaF,EAAOG,wBAC1B,MAAMC,EAAgBxM,KAAKqF,GAAG+D,WAAWqD,KAAKF,wBAC9CvM,KAAK2K,YAAc,CACjBC,IAAK0B,EAAW1B,IAAM4B,EAAc5B,IACpCC,KAAMyB,EAAWzB,KAAO2B,EAAc3B,K,EAK5C,gBAAAQ,CAAiBtI,GACf,MAAMX,EAAQpC,KAAKwK,kBACnB,MAAMkC,EAAgBtK,EAAMsJ,UAAU,EAAG1L,KAAKyK,mBAC9C,MAAMc,EAAWvL,KAAK+L,WAAWP,eACjC,MAAMmB,EAAavK,EAAMsJ,UAAUH,GACnC,MAAMhC,EAAWmD,EAAgB,IAAM3J,EAAa,IAAM4J,EAC1D3M,KAAKwK,kBAAoBjB,EACzBvJ,KAAKuK,gBAAkB,MAEvB,MAAMqC,GAAeF,EAAgB,IAAM3J,EAAa,KAAKM,OAC7DrD,KAAK+L,WAAW3J,MAAQmH,EACxBvJ,KAAK+L,WAAWc,kBAAkBD,EAAaA,GAC/C5M,KAAK+L,WAAW5I,QAChBnD,KAAK6L,c,CAGP,gBAAAtK,GAEEvB,KAAK6L,c,CAGP,MAAA5G,GACE,MAAM2F,IAAEA,EAAGC,KAAEA,GAAS7K,KAAK2K,YAC3B,OACEzF,EAAA,OAAArE,IAAA,2CAAKsE,MAAM,yBACTD,EAAA,YAAArE,IAAA,2CACEuE,IAAKC,GAAMrF,KAAK+L,WAAa1G,EAC7BjD,MAAOpC,KAAKwK,kBACZhF,QAAUqC,GAAM7H,KAAKsL,YAAYzD,GACjC1C,MAAO,qBAAqBnF,KAAK8M,kBAGnC5H,EAAA,OAAArE,IAAA,2CAAKsE,MAAM,qBAAqBC,IAAKC,GAAMrF,KAAK8L,UAAYzG,IAE1DrF,KAAKuK,iBAAmBvK,KAAKsK,oBAAoBjH,OAAS,GAC1D6B,EAAA,MAAArE,IAAA,2CACEsE,MAAM,0BACN4H,MAAO,CACLC,SAAU,WACVpC,IAAK,GAAGA,EAAM,OACdC,KAAM,GAAGA,OAEXoC,KAAK,WAEJjN,KAAKsK,oBAAoB9F,KAAI,CAAC0I,EAAMlJ,IACnCkB,EAAA,MACEC,MAAO,CACL,8BAA+B,KAC/BgI,YAAenJ,IAAUhE,KAAK0K,gBAEhCuC,KAAK,SACLtH,QAAS,IAAM3F,KAAKqL,iBAAiB6B,GACrCE,YAAa,IAAMpN,KAAK0K,eAAiB1G,GAExCkJ,M","ignoreList":[]}